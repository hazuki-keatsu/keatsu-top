---
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSearch from "@/assets/icons/IconSearch.svg";
import IconArchive from "@/assets/icons/IconArchive.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import LinkButton from "./LinkButton.astro";
import { SITE } from "@/config";
import CircularProgress from "./CircularProgress.astro";

const { pathname } = Astro.url;

const currentPath =
  pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());

  return currentPath === path || currentPathArray[0] === pathArray[0];
};

const isFirstLoad = Astro.cookies.get("hasLoaded")?.value !== "true";
---

<header class="relative z-10">
  <div 
    id="loading-indicator" 
    class:list={[
      "inline-flex content-card p-2 mt-8 z-50 shadow-lg transition-all duration-200 items-center ml-2 md:ml-4",
      !isFirstLoad && "hidden", // 非首次加载时直接隐藏
      "absolute top-0 left-1/2 transform -translate-x-1/2"
    ]}
  >
    <CircularProgress size={20} color="var(--color-accent)" bgColor="rgba(255,255,255,0)" inline class="mr-2" />
    <p class="text-sm">
      资源加载中...
    </p>
  </div>
  <a
    id="skip-to-content"
    href="#main-content"
    class="absolute start-16 -top-full z-50 bg-background px-3 py-2 text-accent backdrop-blur-lg transition-all focus:top-4"
  >
    跳转到内容
  </a>
  <div
    id="nav-container"
    class="mx-auto flex max-w-app flex-col items-center justify-between sm:flex-row px-4"
  >
    <div
      id="top-nav-wrap"
      class="relative flex w-full items-baseline justify-between content-card mt-4 mb-2 p-4 sm:items-center sm:py-6 sm:mb-0"
    >
      <div class="absolute py-1 text-xl leading-8 font-semibold whitespace-nowrap sm:static sm:my-auto sm:text-2xl sm:leading-none flex items-center">
        <a href="/">
          {SITE.title}
        </a>
      </div>
      
      <nav
        id="nav-menu"
        class="flex w-full flex-col items-center sm:ms-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0"
      >
        <button
          id="menu-btn"
          class="focus-outline self-end p-2 sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconX id="close-icon" class="hidden" />
          <IconMenuDeep id="menu-icon" />
        </button>
        <ul
          id="menu-items"
          class:list={[
            "mt-4 grid w-44 grid-cols-2 place-content-center gap-2",
            "[&>li>a]:block [&>li>a]:px-4 [&>li>a]:py-3 [&>li>a]:text-center [&>li>a]:font-medium [&>li>a]:hover:text-accent sm:[&>li>a]:px-2 sm:[&>li>a]:py-1",
            "hidden",
            "sm:mt-0 sm:flex sm:w-auto sm:gap-x-5 sm:gap-y-0",
          ]}
        >
          <li class="col-span-2">
            <a href="/posts" class:list={{ "active-nav": isActive("/posts") }}>
              文章
            </a>
          </li>
          <li class="col-span-2">
            <a href="/tags" class:list={{ "active-nav": isActive("/tags") }}>
              标签
            </a>
          </li>
          <li class="col-span-2">
            <a href="/about" class:list={{ "active-nav": isActive("/about") }}>
              关于
            </a>
          </li>
          {
            SITE.showArchives && (
              <li class="col-span-2">
                <LinkButton
                  href="/archives"
                  class:list={[
                    "focus-outline flex justify-center p-3 sm:p-1",
                    {
                      "active-nav [&>svg]:stroke-accent": isActive("/archives"),
                    },
                  ]}
                  ariaLabel="archives"
                  title="归档"
                >
                  <IconArchive class="hidden sm:inline-block" />
                  <span class="sm:sr-only">归档</span>
                </LinkButton>
              </li>
            )
          }
          <li class="col-span-1 flex items-center justify-center">
            <LinkButton
              href="/search"
              class:list={[
                "focus-outline flex p-3 sm:p-1",
                { "[&>svg]:stroke-accent": isActive("/search") },
              ]}
              ariaLabel="search"
              title="搜索"
            >
              <IconSearch />
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>
          {
            SITE.lightAndDarkMode && (
              <li class="col-span-1 flex items-center justify-center">
                <button
                  id="theme-btn"
                  class="focus-outline relative size-12 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
                  title="切换暗色 & 亮色模式"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                  <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
                </button>
              </li>
            )
          }
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn");
    const menuItems = document.querySelector("#menu-items");
    const menuIcon = document.querySelector("#menu-icon");
    const closeIcon = document.querySelector("#close-icon");

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    menuBtn.addEventListener("click", () => {
      const openMenu = menuBtn.getAttribute("aria-expanded") === "true";

      menuBtn.setAttribute("aria-expanded", openMenu ? "false" : "true");
      menuBtn.setAttribute("aria-label", openMenu ? "Open Menu" : "Close Menu");

      menuItems.classList.toggle("hidden");
      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");
    });
  }

  toggleNav();
  document.addEventListener("astro:after-swap", toggleNav);

  // 进度指示器逻辑
  function initLoadingIndicator() {
    // 使用setTimeout确保DOM完全就绪
    setTimeout(() => {
      const loadingIndicator = document.getElementById("loading-indicator");
      if (!loadingIndicator) return;

      // 隐藏指示器的函数
      const hideLoadingIndicator = () => {
        // 添加淡出动画
        loadingIndicator.style.opacity = "0";
        loadingIndicator.style.transform = "scale(0.9)";
        
        // 动画结束后完全隐藏
        setTimeout(() => {
          loadingIndicator.style.display = "none";
        }, 200);
      };

      // 仅在首次加载时处理
      if (!document.cookie.includes("hasLoaded=true")) {
        // 监听页面完全加载完成
        if (document.readyState === "complete") {
          hideLoadingIndicator();
        } else {
          window.addEventListener("load", hideLoadingIndicator, { once: true });
        }

        // 超时保护 - 5秒后强制隐藏
        setTimeout(hideLoadingIndicator, 5000);

        // 设置cookie标记已加载
        document.cookie = "hasLoaded=true; path=/; max-age=31536000";
      } else {
        // 非首次加载直接隐藏
        loadingIndicator.style.display = "none";
      }
    }, 0);
  }

  // 初始化指示器
  initLoadingIndicator();

  // 处理Astro页面切换
  document.addEventListener("astro:after-swap", () => {
    const loadingIndicator = document.getElementById("loading-indicator");
    if (loadingIndicator) {
      loadingIndicator.style.display = "none";
    }
  });
</script>

<style>
  #loading-indicator {
    transition: opacity 0.2s ease, transform 0.2s ease;
    opacity: 1;
    transform: scale(1);
  }
</style>
